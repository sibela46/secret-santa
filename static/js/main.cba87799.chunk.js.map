{"version":3,"sources":["green-present.svg","white_christmas.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","require","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","showName","names","pickedNumber","posts","i","length","cookie","save","path","_this2","window","scrollTo","axios","get","then","res","setState","data","console","log","catch","error","needle","findNaN","Array","prototype","indexOf","index","item","cookieNames","load","document","getElementsByClassName","style","display","post","event","Math","floor","random","pickedName","allNumbers","undefined","contains","push","react_default","a","createElement","className","onClick","showBox","bind","src","logo","giveName","alt","lib_default","url","soundfile","playStatus","Sound","status","PLAYING","playFromPosition","onLoading","handleSongLoading","onPlaying","handleSongPlaying","onFinishedPlaying","handleSongFinishedPlaying","Component","Boolean","location","hostname","match","ReactDOM","render","es6","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iVCkIzBC,GA1HPC,EAAQ,gBAEd,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAU,EACVC,MAAO,CAAC,SAAU,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,QACvEC,cAAe,EACfC,MAAO,IANQX,oFAUjB,IAAI,IAAIY,EAAI,EAAGA,EAAIT,KAAKI,MAAME,MAAMI,OAAQD,IAC1CE,IAAOC,KAAK,OAASH,EAAGT,KAAKI,MAAME,MAAMG,GAAI,CAAEI,KAAK,kDAGpC,IAAAC,EAAAd,KAClBe,OAAOC,SAAS,EAAG,GACnBC,IACGC,IACC,4FAEDC,KAAK,SAAAC,GACJN,EAAKO,SAAS,CAAEb,MAAOY,EAAIE,KAAKd,QAChCe,QAAQC,IAAIJ,EAAIE,KAAKd,SAEtBiB,MAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,sCAEvBC,GAEP,IAAIC,EAAUD,IAAWA,EAsBzB,OAnBIC,GAA8C,oBAA5BC,MAAMC,UAAUC,QAGxB,SAASJ,GACf,IAAIlB,GAAK,EAAGuB,GAAS,EAErB,IAAIvB,EAAI,EAAGA,EAAIT,KAAKU,OAAQD,IAAK,CAC7B,IAAIwB,EAAOjC,KAAKS,GAEhB,GAAImB,GAAWK,IAASA,GAASA,IAASN,EAAQ,CAC9CK,EAAQvB,EACR,OAIR,OAAOuB,GAdDH,MAAMC,UAAUC,SAkBf5B,KAAKH,KAAM2B,IAAW,oCAGrC,IAAK,IAAIlB,EAAE,EAAGA,EAAIT,KAAKI,MAAME,MAAMI,OAAQD,IACzCT,KAAKqB,SAAS,CAAEa,YAAavB,IAAOwB,KAAK,OAAS1B,KAEpD2B,SAASC,uBAAuB,SAAS,GAAGC,MAAMC,QAAU,OAC5DH,SAASC,uBAAuB,QAAQ,GAAGC,MAAMC,QAAU,QAC3D,IAAM/B,EAAQR,KAAKI,MAAMI,MAAM,GAC/BS,IACGuB,KACC,6FACA,CAAChC,UAEFW,KAAK,SAAAC,GACJG,QAAQC,IAAIJ,EAAIE,KAAKd,SAEtBiB,MAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,sCAEvBe,GACPzC,KAAKqB,SAAS,CACZhB,UAAU,IAEZ+B,SAASC,uBAAuB,QAAQ,GAAGC,MAAMC,QAAU,OAI3D,IAHA,IAAIhC,EAAemC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC/BC,EAAalC,IAAOwB,KAAK,OAAS5B,GAClCuC,EAAa,QACKC,IAAfF,GAA0B,CAK/B,GAJAtC,EAAemC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC1B5C,KAAKgD,SAAS7C,KAAK2C,EAAYvC,IAClCuC,EAAWG,KAAK1C,GAEO,GAArBuC,EAAWpC,OAAa,CAC1BmC,EAAa,gBACb,MAEFA,EAAalC,IAAOwB,KAAK,OAAS5B,GAEpCP,KAAKqB,SAAS,CACZwB,WAAYA,qCAId,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,iCACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,kBAAJ,mCACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,kBAAJ,sDACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,kBAAJ,2EAA2FF,EAAAC,EAAAC,cAAA,sBAA3F,WACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,kBAAJ,kCACAF,EAAAC,EAAAC,cAAA,UAAQE,QAAStD,KAAKuD,QAAQC,KAAKxD,OAAnC,aAEFkD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKK,IAAKC,IAAML,UAAU,OAAOC,QAAStD,KAAK2D,SAASH,KAAKxD,MAAO4D,IAAI,SACvE5D,KAAKI,MAAMC,SAAW6C,EAAAC,EAAAC,cAAA,UAAKpD,KAAKI,MAAMyC,YAAmB,IAE5DK,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACEW,IAAKC,IACLC,WAAYC,IAAMC,OAAOC,QACzBC,iBAAkB,IAClBC,UAAWrE,KAAKsE,kBAChBC,UAAWvE,KAAKwE,kBAChBC,kBAAmBzE,KAAK0E,oCAlHhBC,sBCGEC,QACW,cAA7B7D,OAAO8D,SAASC,UAEe,UAA7B/D,OAAO8D,SAASC,UAEhB/D,OAAO8D,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACAhC,EAAAC,EAAAC,cAAC+B,EAAD,OAEA/C,SAASgD,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpE,KAAK,SAAAqE,GACjCA,EAAaC","file":"static/js/main.cba87799.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/green-present.5b5dda5e.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_christmas.cc877a19.mp3\";","import React, { Component } from 'react';\nimport logo from './green-present.svg';\nimport './App.scss';\nimport soundfile from './white_christmas.mp3'\nimport Sound from 'react-sound'\nimport cookie from 'react-cookies';\nimport axios from 'axios';\n\nvar $ = require('jquery')\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showName: false,\n      names: ['Callum', 'Jack', 'Elias', 'Katie', 'Palvi', 'Myles', 'James', 'Sisi'],\n      pickedNumber: -1,\n      posts: []\n    };\n  }\n  componentWillMount() {\n    for(var i = 0; i < this.state.names.length; i++) {\n      cookie.save('name' + i, this.state.names[i], { path:'/' });\n    }\n  }\n  componentDidMount() {\n    window.scrollTo(0, 0);\n    axios\n      .get(\n        \"https://public-api.wordpress.com/rest/v1/sites/secretsanta804559216.wordpress.com/posts/\"\n      )\n      .then(res => {\n        this.setState({ posts: res.data.posts });\n        console.log(res.data.posts);\n      })\n      .catch(error => console.log(error));\n  }\n  contains(needle) {\n    // Per spec, the way to identify NaN is that it is not equal to itself\n    var findNaN = needle !== needle;\n    var indexOf;\n\n    if(!findNaN && typeof Array.prototype.indexOf === 'function') {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function(needle) {\n            var i = -1, index = -1;\n\n            for(i = 0; i < this.length; i++) {\n                var item = this[i];\n\n                if((findNaN && item !== item) || item === needle) {\n                    index = i;\n                    break;\n                }\n            }\n\n            return index;\n        };\n    }\n\n    return indexOf.call(this, needle) > -1;\n  }\n  showBox() {\n    for (var i=0; i < this.state.names.length; i++) {\n      this.setState({ cookieNames: cookie.load('name' + i)})\n    }\n    document.getElementsByClassName('rules')[0].style.display = \"none\";\n    document.getElementsByClassName('jump')[0].style.display = \"block\";\n    const posts = this.state.posts[0];\n    axios\n      .post(\n        \"https://public-api.wordpress.com/rest/v1/sites/secretsanta804559216.wordpress.com/posts/\" + 13,\n        {posts}\n      )\n      .then(res => {\n        console.log(res.data.posts);\n      })\n      .catch(error => console.log(error));\n  }\n  giveName(event) {\n    this.setState({\n      showName: true\n    })\n    document.getElementsByClassName('jump')[0].style.display = \"none\";\n    var pickedNumber = Math.floor(Math.random() * 8);\n    var pickedName = cookie.load('name' + pickedNumber);\n    var allNumbers = []\n    while (pickedName === undefined) {\n      pickedNumber = Math.floor(Math.random() * 8);\n      if (!this.contains.call(allNumbers, pickedNumber)) {\n        allNumbers.push(pickedNumber);\n      }\n      if (allNumbers.length == 8) {\n        pickedName = \"No names left\";\n        break;\n      }\n      pickedName = cookie.load('name' + pickedNumber);\n    }\n    this.setState({\n      pickedName: pickedName\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"rules\">\n        <h1>Secret Santa Rules:</h1>\n          <h2><span>1.</span> Draw a name from the magic box</h2>\n          <h2><span>2.</span> You will then be a Secret Santa to that person...</h2>\n          <h2><span>3.</span> Which means you will have to buy them a cute little gift (no more than <span>Â£10</span> worth)</h2>\n          <h2><span>4.</span> Are you ready to draw a name?</h2>\n          <button onClick={this.showBox.bind(this)}>Click me</button>\n        </div>\n        <header className=\"App-header\">\n          <img src={logo} className=\"jump\" onClick={this.giveName.bind(this)} alt=\"logo\" />\n          {this.state.showName ? <h1>{this.state.pickedName}</h1> : \"\"}\n        </header>\n        <Sound\n          url={soundfile}\n          playStatus={Sound.status.PLAYING}\n          playFromPosition={300 /* in milliseconds */}\n          onLoading={this.handleSongLoading}\n          onPlaying={this.handleSongPlaying}\n          onFinishedPlaying={this.handleSongFinishedPlaying}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { CookiesProvider } from 'react-cookie';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <CookiesProvider>\n  <App />\n  </CookiesProvider>, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}